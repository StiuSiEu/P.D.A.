#include "kernel.h"
#include <stdio.h>
#include <stdlib.h>
#include <cuda.h>
#include <cutil.h>
#include <cuda_runtime.h>

// Device code
__global__ void binary_search(int search, int array_length, int *arr, int *ret_val )
{
     int i = threadIdx.x;
}

// Host code
int main()
{
    int N = 4;
    int search=2;
    size_t size = N * sizeof(int);
    
    int h_result=0;
    int *d_result;
    cudaMalloc(&d_result,sizeof(int));
    cudaMemcpy(d_result,h_result,sizeof(int),cudaMemcpyHostToDevice);
   
   
    int* h_A = (int*)malloc(size);
    for(int i=0;i<=N;i++)
    {
        h_A[i]=i+1;
    }

    int* d_A;
    cudaMalloc(&d_A, size);
    cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice);
  
    p_ary_search<<<16, 64>>>(search, N, d_A, d_result);


    cudaMemcpy(h_result, d_result, sizeof(int), cudaMemcpyDeviceToHost);
    printf("The element position is %d", d_result);

   
    cudaFree(d_A);
    cudaFree(d_result);
}

